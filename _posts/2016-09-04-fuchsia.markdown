---
title: "Google 的新操作系统 Fuchsia"
subtitle: ""
categories: [design]
layout: post
---

Google 近期在 github 上建立了一个新的 organization，名为 Fuchsia，这是Google正在研发的另一款操作系统。因为 Google 已经拥有 Android 和 Chrome OS 两种操作系统，大家都在猜测为什么还要费力去开发新的系统。有两种猜想，一个是因为 Linux 内核的GPL协议一直限制着商用闭源，另一个是新的操作系统的目标是要打造嵌入式的实时操作系统用于日益成熟的虚拟现实、智能家电等设备。

Fuchsia OS的内核名为magenta，其中有MIT和BSD两种协议。微内核kernel用的是MIT协议，用户空间的服务、库、驱动用的是BSD协议。除了输入输出端口读操作、wait、sleep这些API以外的API都设计为非阻塞的。Fuchsia支持X86和ARM处理器。


# LK 嵌入式内核

LK embedded kernel 是 另一个[内核开源项目](https://github.com/littlekernel/lk), 专门为移动小型设备打造，起能够应用在RAM很小、外设有限的系统中。 Magenta内核的内部构建基于LK，上层实现了进程、对象句柄、安全机制的概念。


# Magenta 内核对象

Magenta 是基于对象的内核。用户空间的程序通过内核对象句柄和系统资源进行交互。内核对象由C++类实现，派生自Dispatcher类，目前实现了下面几种对象。

- 进程
- 线程
- 事件
- 消息管道
- I/O中断请求
- 虚拟内存对象

内核对象的生命周期是由引用计数器来控制的。一个内核对象一般因某个系统调用而产生，将一个句柄与其绑定，引用数refcount设为1。该对象呗其他句柄引用时，计数加1。调用sys_close等调用讲句柄与对象分离后，引用计数减1。当引用计数为0时内核对象会被销毁。


# 系统调用

## Thread
+ [nanosleep]()

## Handles

+ [handle_close]()
+ [handle_duplicate]()
+ [handle_replace]()
+ [handle_wait_many]()
+ [handle_wait_one]()

## Message Pipes

+ [msgpipe_create]()
+ [msgpipe_read]()
+ [msgpipe_write]()

## Futexes

+ [futex_wait]()
+ [futex_wake]()
+ [futex_requeue]()

## IO Ports

+ [port_create]()
+ [port_queue]()
+ [port_wait]()
+ [port_bind]()

## Threads
+ [thread_arch_prctl]()

## Cryptographically Secure RNG
+ [cprng_draw]()
+ [cprng_add_entropy]()

## Wait Sets
+ [waitset_create]()
+ [waitset_add]()
+ [waitset_remove]()
+ [waitset_wait]()






<!--
这里是注释区

```
print "hello"
```

***Stronger***

{% highlight python %}
print "hello, Lucky!"
{% endhighlight %}

![My image]({{ site.baseurl }}/images/emule.png)

My Github is [here][mygithub].
[mygithub]: https://github.com/lucky521

-->