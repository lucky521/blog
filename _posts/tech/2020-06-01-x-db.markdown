---
title: "x-DB"
categories: [Tech]
layout: post
---

# X_DB需解决的问题

X_DB往往是在线系统和离线系统的边界。

* 数据接口以如何形式组织
* 内部存储数据以如何形式组织
* 数据如何更新
* 数据有效期
* 数据如何版本回滚
* 如何扩容
* 最大可存储的数据量
* 最大可写的速度
* 最大可服务的吞吐量
* 最大可提供的吞吐速度


## 结合应用场景说话

* OLTP 写多读少。 每次读都读极小数据。  读要求低延时， 要求高并发
* OLAP 写少读多。 每次读会读大量数据。
* HTAP
* 机器学习场景离线对数据的要求是海量， 在线对数据的要求是低延迟

## 缓存无底洞

http://ifeve.com/redis-multiget-hole/

## 缓存雪崩

同一时刻大量cache时效，导入对底层数据库的冲击。
缓存雪崩发生场景 : 当Redis服务器重启或者大量缓存在同一时期失效时,此时大量的流量会全部冲击到数据库上面,数据库有可能会因为承受不住而宕机

## 缓存穿透

缓冲穿透发生场景 : 此时要查询的数据不存在,缓存无法命中所以需要查询完数据库,但是数据是不存在的,此时数据库肯定会返回空,也就无法将该数据写入到缓存中,那么每次对该数据的查询都会去查询一次数据库。

## 缓存预热








# X_DB 技术架构

## 存储引擎
B+ Tree模型

LSM-Tree模型(log-structured merge-tree)

## 分片 和 弹性伸缩
分片在不同系统中有各自的别名，Spanner 和 YugabyteDB 中被称为 Tablet，在 HBase 和 TiDB 中被称为 Region，在 CockraochDB 中被称为 Range。

## 分布式哈希寻址

https://www.jianshu.com/p/fe7b7800473e


## 数据一致性

Raft

Paxos

Gossip 弱


## MVCC 
(Multi-Version Concurrency Control)：多版本并发控制


## 事务处理能力
分布式kv存储具备海量的存储和服务能力，但没有事务能力。
## NewSQL
NewSQL的基础是NoSQL. 在架构设计上倾向计算节点与存储节点分离。
Google的分布式数据库，有怎么样的特性。
* 关系型数据库，支持SQL、ACID事务
* 无论schema变更、主从同步，都保持99.999%以上可用率
* 根据请求负载和数据大小自动分片

## PostgreSQL-XC
从单体数据库出发进行拓展分布式化，最大程度复用了单体数据库的工程实现，通过协调节点来协调大量的数据节点（单体数据库）。


WAL 机制
WAL(Write Ahead Log)预写日志，是数据库系统中常见的一种手段，用于保证数据操作的原子性和持久性。
「修改并不直接写入到数据库文件中，而是写入到另外一个称为 WAL 的文件中；如果事务失败，WAL 中的记录会被忽略，撤销修改；如果事务成功，它将在随后的某个时间被写回到数据库文件中，提交修改。」



## 硬件加速

持久化内存 AEP
AEP是Intel最新研发的持久内存产品，具备掉电数据不丢失、低成本（DRAM的1/3）、高性能（DRAM的1/7~1/4）等特性
AEP的读写不对称，读性能明显优于写性能


SSD
写放大问题:写入放大（WA）是闪存和固态硬盘之间相关联的一个属性，因为闪存必须先删除才能改写（我们也叫“编程“），在执行这些操作的时候，移动（或重写）用户数据和元数据(metadata)不止一次。这些多次的操作，不但增加了写入数据量，减少了SSD的使用寿命，而且还吃光了闪存的带宽（间接地影响了随机写入性能）




# X_DB 开源

键值存储：常见的键值存储数据库有Redis、Memcached、leveldb、rocksdb、tair、etcd
行式存储：常见的行式数据库有MySQL、PostgreSQL、MS SQL Server。
列式存储：常见的列式数据库有 Hbase、Kudu、ClickHouse、 Vertica、 Paraccel (Actian Matrix，Amazon Redshift)、 Sybase IQ、 Exasol、 Infobright、 InfiniDB、 MonetDB (VectorWise， Actian Vector)、 LucidDB、 SAP HANA、 Google Dremel、 Google PowerDrill、 Druid、 kdb+。


## MySQL 关系数据库

需要了解什么场景适合mysql，什么场景不合适mysql


## Redis 
出于访问性能，将数据库放在内存。

redis 实现高并发主要依靠主从架构，一主多从

哨兵模式 Sentinel

pipeline命令
允许client将多个请求依次发给服务器（redis的客户端，如jedisCluster，lettuce等都实现了对pipeline的封装），过程中而不需要等待请求的回复，在最后再一并读取结果即可。

Pika Pika是一个可持久化的大容量redis存储服务  https://github.com/Qihoo360/pika


## Tair



## rocksDB
RocksDB 的核心数据结构是 LSM-Tree

### RocksDB Column Family

每一个KV对都会关联一个Column Family, 其中默认的Column Family是 “default”. 
Column Family主要是提供给RocksDB一个逻辑的分区.

RocksDB 是一个基于 LevelDB 衍生的键值存储数据库，它内部的数据以 ColumnFamily（列族，亦有译为列簇）为逻辑单位进行存储.

当用户发出读取请求时，RocksDB 先从 MemTable 查找；如果没找到，再查找不可变的 MemTable，随后再磁盘上进行逐级查找


## levelDB
单机数据库，一次只允许一个进程访问一个特定的数据库
适合场景 高频写、低频读

## MongoDB

## Cassandra

## etcd

## OPENTSDB

 Time Series Database， 对比传统数据库仅仅记录了数据的当前值，时序数据库则记录了所有的历史数据。同时时序数据的查询也总是会带上时间作为过滤条件。

## InfluxDB

 InfluxDB是一个由InfluxData开发的开源时序型数据。它由Go写成，着力于高性能地查询与存储时序型数据。InfluxDB被广泛应用于存储系统的监控数据，IoT行业的实时数据等场景。


## elasticsearch
你说它是搜索引擎也好，也是有很多场景把ELK作为数据库的。

## Hbase
基于hdfs的kv数据库，性能差



## Nebula Graph 图数据库
https://xie.infoq.cn/article/e550a032bd421916b72dcca24


## TiDB 分布式事务数据库

## YugabyteDB

## cockroachDB







# X_FS

存储接口标准： AWS S3标准协议 (Amazon Simple Storage Service (Amazon S3) )

## ChubaoFS
ChubaoFS（CFS）是京东开发的分布式文件系统和对象存储系统

## CephFS

## HDFS

## GlusterFS



# 参考

[性能提升2.58倍！阿里最快KV存储引擎揭秘](https://developer.aliyun.com/article/749455?utm_content=g_1000107624)
[百度信息流和搜索业务中的KV存储实践](https://zhuanlan.zhihu.com/p/414844474)
[美团点评万亿级 KV 存储架构与实践](https://tech.meituan.com/2020/07/01/kv-squirrel-cellar.html)
[两大10亿级的储存挑战，微信究竟是怎么扛住的？](https://dbaplus.cn/news-148-2740-1.html)
[关于 TiDB 的正确使用姿势](https://zhuanlan.zhihu.com/p/25574778)
[字节跳动自研强一致在线 KV &表格存储实践 - 上篇](https://mp.weixin.qq.com/s?__biz=MzI1MzYzMjE0MQ==&mid=2247485932&idx=1&sn=28394ff3b8ac272852f22105c3768d0f&chksm=e9d0c20edea74b18d6d8eaa0720c52351b4bfaeb0ebde24e08db4c899012d2ad90c2aa977806&token=911418867&lang=zh_CN&scene=21#wechat_redirect)
[字节跳动自研强一致在线 KV &表格存储实践 - 下篇](https://mp.weixin.qq.com/s?__biz=MzI1MzYzMjE0MQ==&mid=2247485942&idx=1&sn=01192ff69299de3a007de789ac84564b&chksm=e9d0c214dea74b0245c5d4ac0854d23a113ccc55e3ee042fc1239e14d5860817f1d88fc9befa&token=1461619284&lang=zh_CN#rd)
https://db-engines.com/en/