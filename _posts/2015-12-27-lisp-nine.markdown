---
title: "Lisp语言中的9个设计思想"
subtitle: "神奇的Lisp"
categories: [design]
layout: post
---
1960年，John McCarthy发表了一篇论文，给定一些简单的操作和函数声明，你可以构建一套编程语言。他的核心理解是使用简单的列表结构来表达编码和数据，他把这套语言称作是`Lisp`。

Lisp中存在9个重要的设计思想，这9个思想在50年多年后的今天看起来仍然那么先进。

## (1) 条件结构
if-then-else结构, 现在大家都觉得这是理所当然的，但是当年Fortran I就没有这个结构，它只有基于底层机器指令的goto结构。

## (2) 函数也是一种数据类型
在Lisp语言中，函数与整数或字符串一样，也属于数据类型的一种。它有自己的字面表示形式（literal representation），能够存储在变量中，也能当作参数传递。一种数据类型应该有的功能，它都有。

## (3) 递归
Lisp是第一种支持递归函数的高级语言。

## (4) 变量的动态类型
在Lisp语言中，所有变量实际上都是指针，所指向的值有类型之分，而变量本身没有。复制变量就相当于复制指针，而不是复制它们指向的数据。

## (5) 垃圾回收机制
Lisp是第一种提出和实现垃圾回收机制的语言。找寻并标记所有的Lsip对象，栈上的所有符号对应的值、数据、函数认为是可达的，经由可达符号达到的符号也是可达的。其他的符号认为是不可达的。垃圾回收期将不可达的符号回收到free list里以供再利用。

## (6) 程序由表达式组成
Lisp程序是一些表达式树的集合，每个表达式都返回一个值。这与Fortran和大多数后来的语言都截然不同，它们的程序由表达式和语句组成。

区分表达式和语句在Fortran I中是很自然的，因为它不支持语句嵌套。所以，如果你需要用数学式子计算一个值，那就只有用表达式返回这个值，没有其他语法结构可用，否则就无法处理这个值。

后来，新的编程语言支持块结构，这种限制当然也就不存在了。但是为时已晚，表达式和语句的区分已经根深蒂固。它从Fortran扩散到Algol语言，接着又扩散到它们两者的后继语言。

## (7) 符号类型
符号实际上是一种指针，指向存储在散列表中的字符串。所以，比较两个符号是否相等，只要看它们的指针是否一样就行了，不用逐个字符地比较。

## (8) 符号树表示代码 
代码使用符号和常量组成的树形表示法。

## (9) 语言的持久可用
无论什么时候，整个语言都是可用的。Lisp并不真正区分读取期、编译期和运行期。你可以在读取期编译或运行代码，也可以在编译期读取或运行代码，还可以在运行期读取或者编译代码。


[原文链接](http://www.paulgraham.com/diff.html)
[Garbage Collection](http://www.gnu.org/software/emacs/manual/html_node/elisp/Garbage-Collection.html)



<!--
这里是注释区


{% highlight python %}
print "hello, Lucky!"
{% endhighlight %}

![My image]({{ site.baseurl }}/images/emule.png)

My Github is [here][mygithub].

[mygithub]: https://github.com/lucky521


-->