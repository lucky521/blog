---
layout: post
title:  "机器学习系统工程"
subtitle: "机器学习平台"
categories: [MachineLearning]
---

# 什么是机器学习系统？

我觉得机器学习系统（又可以称作是`模型系统`、`机器学习平台`、`ML-as-a-service system`）作为一个软件系统，它不是一个孤立存在的软件系统，而总是作为一个工具服务于另一个更大的软件系统。比如用于预测一件事情发生的概率，或是用于预测一个事物所属的归类，而被安放在某种识别系统、推荐系统、搜索排序系统、广告系统之中。

在不同应用中的模型系统又具有很多相同之处，因此机器学习系统可以作为一个独立的系统来进行设计和开发。

- 和其他软件系统一样，机器学习系统在设计和开发阶段一样需要软件设计思想。
- 和其他软件系统一样，机器学习系统在应用时要求好的运行质量和好的运行速度。
- 和其他软件系统一样，机器学习系统随着规模的扩大、对性能要求的提高，也会面临性能挑战。
- 和其他软件系统一样，机器学习系统需要足够的可扩展性，运行更多新的功能被开发出来。

## 机器学习系统和其他软件系统有什么差别？

机器学习系统中“错误”这一概念要更模糊一些。

机器学习系统中的”数据“(样本)会实质性的影响"逻辑"(模型)。你不能简单的把数据和代码彻底分开看待。有个词叫"data-intensive system"。

软件系统存在的目的是什么？提供电子化、自动化的某种功能，方便人类的生产或生活。机器学习系统也是如此。

机器学习系统的用户，一类是建模者，一般是数据分析师、算法工程师等；另一类是模型的使用者，一般是算法工程师、系统工程师。一个机器学习系统越是完善，那么这两类人群的效率就会越高。


# 机器学习系统的组成

如果硬要先做一个大题的划分，可以有以下几种划分方式
* 离线系统 vs 在线系统
* 特征系统 vs 模型系统

## 离线功能部分(Train)
样本数据相关：
- 标签接收、特征接收
- 样本验证框架（数据验证、ExampleGen、StatisticsGen、SchemaGen）
- 样本预处理框架（DataTransform）

模型训练相关：
- 模型训练（Trainer、分布式训练、自动调参、增量学习、调度器）
- 模型验证（灵活的Evaluator、离线指标计算）
- 模型版本控制（模型元数据库）
- 模型推送（Pusher）


## 在线功能部分(Inference)
在线指的是用户即时请求模型预估时所需要执行到的功能。

特征数据相关：
- 特征数据服务（Feature Flow、Feature Service）
- 在线特征生成框架
- 特征日志记录、事件埋点记录
- 数据监控

模型预测相关：
- 模型热更新
- 模型预测服务（本地预测、远端预测服务、在线学习）、
- 模型灰度
- 模型监控


## 人机交互（UI）
- 训练任务和可视化训练平台（可编写训练Workflow、实验模型可重载、训练任务可重载、训练结果历史库）
- 多机多卡训练如单机单卡一样简单
- 特征和样本管理平台
- 模型配置、发布、管理系统ha
- 数据可视化: 任何环节的数据，只要数据多到人难以关注，就需要有数据可视化工具来辅助。
  - 数值分布可视化
  - 关系网络可视化： 链路关系、 数据溯源
- 监控、报警平台
  - 对于数据的监控报警要与数据可视化配合


## 监控(Monitor)
- 各环节性能监控
- 离线样本值监控
- 在线特征值监控
- 预发指标预算
- 线上指标监控

## 资源调度
资源是指images、cpu、内存、gpu、磁盘。在训练和预测的时候，都存在资源调度的需要。
- 灵活的部署训练资源，执行训练任务。
- 安全稳定的部署预测任务，发布线上预测服务。




# 机器学习系统的设计

并不是所有的模块都需要从0设计，集成合适的开源组件，是一种不错的选择。

## 模块化设计

在线系统与离线系统的接口

分层设计

配置设计

充分的可视化交互设计


## 测试/持续集成设计

支持特征快速开发

支持模型快速迭代

支持模型自动迭代

数据流水线的设计和数据验证

模型管理的设计


## 实时性、超大量级的挑战

特征实时性

样本实时性

模型实时性

分布式训练

分布式预测

响应速度




# 工业开源实践

## 各层组件的开源实施

基础设施层方案
- yarn
- k8s

数据流方案（airflow argo kubeflow）、资源调度
- oozie: https://oozie.apache.org/
- jenkins ?
- 数据流批处理框架：kubeflow.org
- 数据流程化处理系统：https://github.com/apache/airflow
- DAG数据工作流框架： https://mlflow.org/
- 可视化数据流处理系统： https://nifi.apache.org/
- 类似于kubeflow的：https://polyaxon.com/
- https://github.com/argoproj/argo
- https://mitdbg.github.io/modeldb/
- https://github.com/Qihoo360/XLearning
- https://github.com/features/actions

数据可视化
- https://github.com/PAIR-code/facets

数据处理层组件
- https://github.com/pachyderm/pachyderm
- https://github.com/tensorflow/transform

模型训练层组件
- PaddlePaddle
- pytorch
- mxnet
- 分布式的Tensorflow：https://github.com/tensorflow/examples/blob/master/community/en/docs/deploy/distributed.md
- Horovod: https://eng.uber.com/horovod/
- oneflow: https://docs.oneflow.org/basics_topics/essentials_of_oneflow.html

模型抽象层
- https://eng.uber.com/introducing-neuropod/ , https://github.com/uber/neuropod

模型核心内核组件
- https://zhuanlan.zhihu.com/p/121834310

模型分析层组件
- https://github.com/tensorflow/model-analysis , https://github.com/tensorflow/model-analysis/blob/master/g3doc/get_started.md

模型可视化
- https://github.com/dair-ai/ml-visuals

预估服务层组件
- https://github.com/tensorflow/serving

模型仓库
- https://github.com/tensorflow/hub , https://tfhub.dev/

版本控制
- https://dvc.org/



## 工业界完整方案

- TFX by google : https://github.com/tensorflow/tfx
- FBLearner Flow by facebook: https://engineering.fb.com/core-data/introducing-fblearner-flow-facebook-s-ai-backbone/
- Michelangelo by uber: https://eng.uber.com/michelangelo/
- BigHead by airbnb :
### TFX

全称 Tensorflow Extended

数据预处理组件 https://github.com/tensorflow/transform

### PAI
PAI-DSW（Data Science Workshop）是为算法开发者量身打造的云端深度学习开发环境，集成JupyterLab，插件化深度定制化开发，无需任何运维配置，沉浸式体验Notebook编写、调试及运行Python代码。支持开源框架的安装，并提供阿里巴巴深度优化的Tensorflow框架，通过编译优化提升训练性能。
https://help.aliyun.com/product/30347.html


### EasyDL / BML

百度推出的机器学习平台。
https://ai.baidu.com/easydl/
https://ai.baidu.com/bml/


### mindspore

华为推出的机器学习平台
https://www.mindspore.cn/tutorials/zh-CN/master/distributed_training.html



# 参考

[视频教程](https://www.youtube.com/c/PipelineAI/)

[如何构建产品化机器学习系统？](https://www.atyun.com/40739.html)

[机器学习系统的工程实践](https://zhuanlan.zhihu.com/p/55032862)

https://papers.nips.cc/paper/5656-hidden-technical-debt-in-machine-learning-systems.pdf

https://storage.googleapis.com/pub-tools-public-publication-data/pdf/aad9f93b86b7addfea4c419b9100c6cdd26cacea.pdf

[美团搜索的模型系统实践](toutiao.com/i6850045815361110535)

[爱奇艺的机器学习平台建设](https://www.infoq.cn/article/uu6drwtuliqgmdbdjc9m)

[machine-learning-systems-design](https://github.com/chiphuyen/machine-learning-systems-design)

[Deep Learning Infrastructure at Scale: An Overview](https://mlconf.com/blog/deep-learning-infrastructure-at-scale-an-overview/)

[Rules of Machine Learning: Best Practices for ML Engineering](http://martin.zinkevich.org/rules_of_ml/rules_of_ml.pdf)

[A Guide to Production Level Deep Learning](https://github.com/alirezadir/Production-Level-Deep-Learning)

[为什么需要机器学习平台？](https://insights.thoughtworks.cn/why-machine-learning-platform/)

[算法与数据中台 知乎文章](https://zhuanlan.zhihu.com/p/245162802)

[feature store](https://docs.featurestore.org/feature-store-comparison)

[特征平台需求分层](https://yiksanchan.com/posts/feature-stores-a-hierarchy-of-needs)